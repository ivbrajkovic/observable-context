{"code":"export class Observable {\n    #subjectProxy;\n    #keys;\n    #handlers;\n    #allHandlers = null;\n    #middlewares = null;\n    onError = null;\n    constructor(subject) {\n        this.#keys = Object.keys(subject);\n        this.#handlers = new Map();\n        this.#subjectProxy = new Proxy(subject, {\n            set: (target, property, newValue, receiver) => {\n                if (typeof property !== \"string\")\n                    return false;\n                const reflectValue = Reflect.get(target, property, receiver);\n                if (newValue === reflectValue)\n                    return true;\n                this.#runMiddlewaresBeforeChange(property, newValue);\n                const success = Reflect.set(target, property, newValue, receiver);\n                if (!success)\n                    return false;\n                this.#runMiddlewaresAfterChange(property, newValue);\n                const invokeHandler = (handler) => {\n                    try {\n                        handler(property, newValue);\n                    }\n                    catch (error) {\n                        this.#handleError(error, `Handler for key: ${String(property)}`);\n                    }\n                };\n                const handlers = this.#handlers.get(property);\n                handlers?.forEach(invokeHandler);\n                this.#allHandlers?.forEach(invokeHandler);\n                return true;\n            },\n        });\n    }\n    get observed() {\n        return this.#subjectProxy;\n    }\n    use(middleware) {\n        if (!this.#middlewares)\n            this.#middlewares = new Set();\n        this.#middlewares.add(middleware);\n    }\n    #runMiddlewaresBeforeChange(key, value) {\n        this.#middlewares?.forEach((middleware) => {\n            try {\n                middleware.beforeChange?.(key, value);\n            }\n            catch (error) {\n                this.#handleError(error, `Middleware (beforeChange) for key: ${String(key)}`);\n            }\n        });\n    }\n    #runMiddlewaresAfterChange(key, value) {\n        this.#middlewares?.forEach((middleware) => {\n            try {\n                middleware.afterChange?.(key, value);\n            }\n            catch (error) {\n                this.#handleError(error, `Middleware (afterChange) for key: ${String(key)}`);\n            }\n        });\n    }\n    #handleError(error, context) {\n        if (!this.onError)\n            return;\n        const safeError = error instanceof Error ? error : new Error(String(error));\n        this.onError(safeError, context);\n    }\n    subscribe(key, handler) {\n        const handlers = this.#handlers.get(key) ?? new Set();\n        handlers.add(handler);\n        this.#handlers.set(key, handlers);\n        return () => this.unsubscribe(key, handler);\n    }\n    subscribeMany(keys, handler) {\n        keys.forEach((key) => this.subscribe(key, handler));\n        return () => keys.forEach((key) => this.unsubscribe(key, handler));\n    }\n    subscribeAll(handler) {\n        if (!this.#allHandlers)\n            this.#allHandlers = new Set();\n        this.#allHandlers.add(handler);\n        return () => {\n            this.#allHandlers?.delete(handler);\n        };\n    }\n    unsubscribe(key, handler) {\n        this.#handlers.get(key)?.delete(handler);\n        if (!this.#handlers.get(key)?.size)\n            this.#handlers.delete(key);\n    }\n    unsubscribeAll() {\n        this.#handlers.clear();\n        this.#allHandlers?.clear();\n    }\n    subscriberCount(key) {\n        return this.#handlers.get(key)?.size ?? 0;\n    }\n    subscriberAllCount() {\n        return Array.from(this.#handlers.values()).reduce((acc, handlers) => acc + handlers.size, 0);\n    }\n    printSubscribers(output = false) {\n        const tableData = [];\n        this.#handlers.forEach((handlers, key) => {\n            let index = 0;\n            handlers.forEach((handler) => tableData.push({\n                Key: String(key),\n                Handler: handler.name || `Anonymous #${index++}`,\n                \"Handler Details\": handler.toString().substring(0, 100) + \"...\",\n            }));\n        });\n        if (output)\n            console.table(tableData);\n        return tableData.length ? tableData : \"No subscribers\";\n    }\n    printObservedValues(output = false) {\n        const observedValues = Array.from(this.#keys).map((key) => ({\n            Property: key,\n            Value: this.#subjectProxy[key],\n        }));\n        if (output)\n            console.table(observedValues);\n        return observedValues.length ? observedValues : \"No observed values\";\n    }\n}\n//# sourceMappingURL=Observable.js.map","references":[],"map":"{\"version\":3,\"file\":\"Observable.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/class/Observable.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"C:/Users/Ivan/Desktop/utility-creator-ts/packages/flat-state/types/class/Observable.d.ts","writeByteOrderMark":false,"text":"export type Handler<T, K extends keyof T = keyof T> = (key: K, value: T[K]) => void;\nexport type Middleware<T> = {\n    beforeChange?: (key: keyof T, newValue: T[keyof T]) => void;\n    afterChange?: (key: keyof T, newValue: T[keyof T]) => void;\n};\nexport type ErrorHandler = (error: Error, context?: string) => void;\ntype SubscriberData = {\n    Key: string;\n    Handler: string;\n    \"Handler Details\": string;\n};\nexport declare class Observable<T extends Record<string, unknown>> {\n    #private;\n    onError: ErrorHandler | null;\n    constructor(subject: T);\n    get observed(): T;\n    use(middleware: Middleware<T>): void;\n    subscribe<K extends keyof T>(key: K, handler: Handler<T, K>): () => void;\n    subscribeMany<K extends keyof T>(keys: Array<K>, handler: Handler<T>): () => void;\n    subscribeAll(handler: Handler<T>): () => void;\n    unsubscribe<K extends keyof T>(key: K, handler: Handler<T, K>): void;\n    unsubscribeAll(): void;\n    subscriberCount(key: keyof T): number;\n    subscriberAllCount(): number;\n    printSubscribers(output?: boolean): SubscriberData[] | \"No subscribers\";\n    printObservedValues(output?: boolean): {\n        Property: keyof T;\n        Value: T[keyof T];\n    }[] | \"No observed values\";\n}\nexport {};\n"}}
