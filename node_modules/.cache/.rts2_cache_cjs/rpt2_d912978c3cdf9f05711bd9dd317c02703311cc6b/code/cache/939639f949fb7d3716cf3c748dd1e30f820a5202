{"code":"import { useCallback, useEffect, useRef, useState } from \"react\";\nconst useSubscribeAllFactory = (useObservableContext) => {\n    const useSubscribeAll = (handler) => {\n        const observable = useObservableContext();\n        const [state, setState] = useState(() => observable.observed);\n        const handlerRef = useRef(handler);\n        useEffect(() => {\n            handlerRef.current = handler;\n        }, [handler]);\n        useEffect(() => {\n            return observable.subscribeAll((key, value) => {\n                if (handlerRef.current)\n                    handlerRef.current(key, value);\n                else\n                    setState((state) => ({ ...state, [key]: value }));\n            });\n        }, [observable]);\n        const setValue = useCallback((updates) => Object.entries(updates).forEach(([key, value]) => {\n            observable.observed[key] = value;\n        }), [observable]);\n        return [state, setValue];\n    };\n    return useSubscribeAll;\n};\nexport default useSubscribeAllFactory;\n//# sourceMappingURL=useSubscribeAllFactory.js.map","references":["C:/Users/Ivan/Desktop/utility-creator-ts/packages/observable-context/src/class/Observable.tsx","C:/Users/Ivan/Desktop/utility-creator-ts/node_modules/@types/react/index.d.ts"],"map":"{\"version\":3,\"file\":\"useSubscribeAllFactory.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/useSubscribeAllFactory.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAEjE,MAAM,sBAAsB,GAAG,CAC7B,oBAAyC,EACzC,EAAE;IACF,MAAM,eAAe,GAAG,CACtB,OAAmD,EACnD,EAAE;QACF,MAAM,UAAU,GAAG,oBAAoB,EAAE,CAAC;QAE1C,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAE9D,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;QACnC,SAAS,CAAC,GAAG,EAAE;YACb,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;QAC/B,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QAEd,SAAS,CAAC,GAAG,EAAE;YACb,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;gBAC5C,IAAI,UAAU,CAAC,OAAO;oBAAE,UAAU,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;;oBAClD,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YACzD,CAAC,CAAC,CAAC;QACL,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;QAEjB,MAAM,QAAQ,GAAG,WAAW,CAC1B,CAAC,OAAmB,EAAE,EAAE,CACtB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;YAC/C,UAAU,CAAC,QAAQ,CAAC,GAAc,CAAC,GAAG,KAAmB,CAAC;QAC5D,CAAC,CAAC,EACJ,CAAC,UAAU,CAAC,CACb,CAAC;QAEF,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAU,CAAC;IACpC,CAAC,CAAC;IAEF,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAEF,eAAe,sBAAsB,CAAC\"}","dts":{"name":"C:/Users/Ivan/Desktop/utility-creator-ts/packages/observable-context/types/hooks/useSubscribeAllFactory.d.ts","writeByteOrderMark":false,"text":"import { Observable } from \"class/Observable\";\ndeclare const useSubscribeAllFactory: <T extends Record<string, unknown>>(useObservableContext: () => Observable<T>) => (handler?: ((key: keyof T, value: T[keyof T]) => void) | undefined) => readonly [T, (updates: Partial<T>) => void];\nexport default useSubscribeAllFactory;\n"}}
